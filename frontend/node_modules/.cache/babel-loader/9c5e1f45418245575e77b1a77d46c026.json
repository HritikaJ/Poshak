{"ast":null,"code":"// import axios from 'axios';\n// import {\n// \tBLOG_LIST_REQUEST,\n// \tBLOG_LIST_SUCCESS,\n// \tBLOG_LIST_FAIL,\n// \tBLOG_DETAILS_REQUEST,\n// \tBLOG_DETAILS_SUCCESS,\n// \tBLOG_DETAILS_FAIL,\n// \tBLOG_DELETE_REQUEST,\n// \tBLOG_DELETE_SUCCESS,\n// \tBLOG_DELETE_FAIL,\n// \tBLOG_CREATE_REQUEST,\n// \tBLOG_CREATE_SUCCESS,\n// \tBLOG_CREATE_FAIL,\n// \tBLOG_UPDATE_REQUEST,\n// \tBLOG_UPDATE_SUCCESS,\n// \tBLOG_UPDATE_FAIL,\n// } from '../constants/blogConstants.js';\n// import { logout } from './userActions';\n// export const listBlogs =\n// \t(pageNumber = '') =>\n// \tasync (dispatch) => {\n// \t\ttry {\n// \t\t\tdispatch({ type: BLOG_LIST_REQUEST });\n// \t\t\tconst { data } = await axios.get(\n// \t\t\t\t`/api/products?keyword=${keyword}&pageNumber=${pageNumber}`\n// \t\t\t);\n// \t\t\tdispatch({\n// \t\t\t\ttype: BLOG_LIST_SUCCESS,\n// \t\t\t\tpayload: data,\n// \t\t\t});\n// \t\t} catch (error) {\n// \t\t\tdispatch({\n// \t\t\t\ttype: BLOG_LIST_FAIL,\n// \t\t\t\tpayload:\n// \t\t\t\t\terror.response && error.response.data.message\n// \t\t\t\t\t\t? error.response.data.message\n// \t\t\t\t\t\t: error.message,\n// \t\t\t});\n// \t\t}\n// \t};\n// export const listProductDetails = (id) => async (dispatch) => {\n// \ttry {\n// \t\tdispatch({ type: PRODUCT_DETAILS_REQUEST });\n// \t\tconst { data } = await axios.get(`/api/products/${id}`);\n// \t\tdispatch({\n// \t\t\ttype: PRODUCT_DETAILS_SUCCESS,\n// \t\t\tpayload: data,\n// \t\t});\n// \t} catch (error) {\n// \t\tdispatch({\n// \t\t\ttype: PRODUCT_DETAILS_FAIL,\n// \t\t\tpayload:\n// \t\t\t\terror.response && error.response.data.message\n// \t\t\t\t\t? error.response.data.message\n// \t\t\t\t\t: error.message,\n// \t\t});\n// \t}\n// };\n// export const deleteProduct = (id) => async (dispatch, getState) => {\n// \ttry {\n// \t\tdispatch({\n// \t\t\ttype: PRODUCT_DELETE_REQUEST,\n// \t\t});\n// \t\tconst {\n// \t\t\tuserLogin: { userInfo },\n// \t\t} = getState();\n// \t\tconst config = {\n// \t\t\theaders: {\n// \t\t\t\tAuthorization: `Bearer ${userInfo.token}`,\n// \t\t\t},\n// \t\t};\n// \t\tawait axios.delete(`/api/products/${id}`, config);\n// \t\tdispatch({\n// \t\t\ttype: PRODUCT_DELETE_SUCCESS,\n// \t\t});\n// \t} catch (error) {\n// \t\tconst message =\n// \t\t\terror.response && error.response.data.message\n// \t\t\t\t? error.response.data.message\n// \t\t\t\t: error.message;\n// \t\tif (message === 'Not authorized. Token Failed!') {\n// \t\t\tdispatch(logout());\n// \t\t}\n// \t\tdispatch({\n// \t\t\ttype: PRODUCT_DELETE_FAIL,\n// \t\t\tpayload: message,\n// \t\t});\n// \t}\n// };\n// export const createProduct = () => async (dispatch, getState) => {\n// \ttry {\n// \t\tdispatch({\n// \t\t\ttype: PRODUCT_CREATE_REQUEST,\n// \t\t});\n// \t\tconst {\n// \t\t\tuserLogin: { userInfo },\n// \t\t} = getState();\n// \t\tconst config = {\n// \t\t\theaders: {\n// \t\t\t\tAuthorization: `Bearer ${userInfo.token}`,\n// \t\t\t},\n// \t\t};\n// \t\tconst { data } = await axios.post('/api/products', {}, config);\n// \t\tdispatch({\n// \t\t\ttype: PRODUCT_CREATE_SUCCESS,\n// \t\t\tpayload: data,\n// \t\t});\n// \t} catch (error) {\n// \t\tconst message =\n// \t\t\terror.response && error.response.data.message\n// \t\t\t\t? error.response.data.message\n// \t\t\t\t: error.message;\n// \t\tif (message === 'Not authorized. Token Failed!') {\n// \t\t\tdispatch(logout());\n// \t\t}\n// \t\tdispatch({\n// \t\t\ttype: PRODUCT_CREATE_FAIL,\n// \t\t\tpayload: message,\n// \t\t});\n// \t}\n// };\n// export const updateProduct = (product) => async (dispatch, getState) => {\n// \ttry {\n// \t\tdispatch({\n// \t\t\ttype: PRODUCT_UPDATE_REQUEST,\n// \t\t});\n// \t\tconst {\n// \t\t\tuserLogin: { userInfo },\n// \t\t} = getState();\n// \t\tconst config = {\n// \t\t\theaders: {\n// \t\t\t\t'Content-Type': 'application/json',\n// \t\t\t\tAuthorization: `Bearer ${userInfo.token}`,\n// \t\t\t},\n// \t\t};\n// \t\tconst { data } = await axios.put(\n// \t\t\t`/api/products/${product._id}`,\n// \t\t\tproduct,\n// \t\t\tconfig\n// \t\t);\n// \t\tdispatch({\n// \t\t\ttype: PRODUCT_UPDATE_SUCCESS,\n// \t\t\tpayload: data,\n// \t\t});\n// \t\tdispatch({ type: PRODUCT_DETAILS_SUCCESS, payload: data });\n// \t} catch (error) {\n// \t\tconst message =\n// \t\t\terror.response && error.response.data.message\n// \t\t\t\t? error.response.data.message\n// \t\t\t\t: error.message;\n// \t\tif (message === 'Not authorized. Token Failed!') {\n// \t\t\tdispatch(logout());\n// \t\t}\n// \t\tdispatch({\n// \t\t\ttype: PRODUCT_UPDATE_FAIL,\n// \t\t\tpayload: message,\n// \t\t});\n// \t}\n// };","map":{"version":3,"sources":["C:/Users/dell/Desktop/Poshak/frontend/src/actions/blogActions.js"],"names":[],"mappingssourcesContent":["// import axios from 'axios';\r\n// import {\r\n// \tBLOG_LIST_REQUEST,\r\n// \tBLOG_LIST_SUCCESS,\r\n// \tBLOG_LIST_FAIL,\r\n// \tBLOG_DETAILS_REQUEST,\r\n// \tBLOG_DETAILS_SUCCESS,\r\n// \tBLOG_DETAILS_FAIL,\r\n// \tBLOG_DELETE_REQUEST,\r\n// \tBLOG_DELETE_SUCCESS,\r\n// \tBLOG_DELETE_FAIL,\r\n// \tBLOG_CREATE_REQUEST,\r\n// \tBLOG_CREATE_SUCCESS,\r\n// \tBLOG_CREATE_FAIL,\r\n// \tBLOG_UPDATE_REQUEST,\r\n// \tBLOG_UPDATE_SUCCESS,\r\n// \tBLOG_UPDATE_FAIL,\r\n// } from '../constants/blogConstants.js';\r\n// import { logout } from './userActions';\r\n\r\n// export const listBlogs =\r\n// \t(pageNumber = '') =>\r\n// \tasync (dispatch) => {\r\n// \t\ttry {\r\n// \t\t\tdispatch({ type: BLOG_LIST_REQUEST });\r\n// \t\t\tconst { data } = await axios.get(\r\n// \t\t\t\t`/api/products?keyword=${keyword}&pageNumber=${pageNumber}`\r\n// \t\t\t);\r\n\r\n// \t\t\tdispatch({\r\n// \t\t\t\ttype: BLOG_LIST_SUCCESS,\r\n// \t\t\t\tpayload: data,\r\n// \t\t\t});\r\n// \t\t} catch (error) {\r\n// \t\t\tdispatch({\r\n// \t\t\t\ttype: BLOG_LIST_FAIL,\r\n// \t\t\t\tpayload:\r\n// \t\t\t\t\terror.response && error.response.data.message\r\n// \t\t\t\t\t\t? error.response.data.message\r\n// \t\t\t\t\t\t: error.message,\r\n// \t\t\t});\r\n// \t\t}\r\n// \t};\r\n\r\n// export const listProductDetails = (id) => async (dispatch) => {\r\n// \ttry {\r\n// \t\tdispatch({ type: PRODUCT_DETAILS_REQUEST });\r\n// \t\tconst { data } = await axios.get(`/api/products/${id}`);\r\n\r\n// \t\tdispatch({\r\n// \t\t\ttype: PRODUCT_DETAILS_SUCCESS,\r\n// \t\t\tpayload: data,\r\n// \t\t});\r\n// \t} catch (error) {\r\n// \t\tdispatch({\r\n// \t\t\ttype: PRODUCT_DETAILS_FAIL,\r\n// \t\t\tpayload:\r\n// \t\t\t\terror.response && error.response.data.message\r\n// \t\t\t\t\t? error.response.data.message\r\n// \t\t\t\t\t: error.message,\r\n// \t\t});\r\n// \t}\r\n// };\r\n\r\n// export const deleteProduct = (id) => async (dispatch, getState) => {\r\n// \ttry {\r\n// \t\tdispatch({\r\n// \t\t\ttype: PRODUCT_DELETE_REQUEST,\r\n// \t\t});\r\n\r\n// \t\tconst {\r\n// \t\t\tuserLogin: { userInfo },\r\n// \t\t} = getState();\r\n\r\n// \t\tconst config = {\r\n// \t\t\theaders: {\r\n// \t\t\t\tAuthorization: `Bearer ${userInfo.token}`,\r\n// \t\t\t},\r\n// \t\t};\r\n\r\n// \t\tawait axios.delete(`/api/products/${id}`, config);\r\n\r\n// \t\tdispatch({\r\n// \t\t\ttype: PRODUCT_DELETE_SUCCESS,\r\n// \t\t});\r\n// \t} catch (error) {\r\n// \t\tconst message =\r\n// \t\t\terror.response && error.response.data.message\r\n// \t\t\t\t? error.response.data.message\r\n// \t\t\t\t: error.message;\r\n// \t\tif (message === 'Not authorized. Token Failed!') {\r\n// \t\t\tdispatch(logout());\r\n// \t\t}\r\n// \t\tdispatch({\r\n// \t\t\ttype: PRODUCT_DELETE_FAIL,\r\n// \t\t\tpayload: message,\r\n// \t\t});\r\n// \t}\r\n// };\r\n\r\n// export const createProduct = () => async (dispatch, getState) => {\r\n// \ttry {\r\n// \t\tdispatch({\r\n// \t\t\ttype: PRODUCT_CREATE_REQUEST,\r\n// \t\t});\r\n\r\n// \t\tconst {\r\n// \t\t\tuserLogin: { userInfo },\r\n// \t\t} = getState();\r\n\r\n// \t\tconst config = {\r\n// \t\t\theaders: {\r\n// \t\t\t\tAuthorization: `Bearer ${userInfo.token}`,\r\n// \t\t\t},\r\n// \t\t};\r\n\r\n// \t\tconst { data } = await axios.post('/api/products', {}, config);\r\n\r\n// \t\tdispatch({\r\n// \t\t\ttype: PRODUCT_CREATE_SUCCESS,\r\n// \t\t\tpayload: data,\r\n// \t\t});\r\n// \t} catch (error) {\r\n// \t\tconst message =\r\n// \t\t\terror.response && error.response.data.message\r\n// \t\t\t\t? error.response.data.message\r\n// \t\t\t\t: error.message;\r\n// \t\tif (message === 'Not authorized. Token Failed!') {\r\n// \t\t\tdispatch(logout());\r\n// \t\t}\r\n// \t\tdispatch({\r\n// \t\t\ttype: PRODUCT_CREATE_FAIL,\r\n// \t\t\tpayload: message,\r\n// \t\t});\r\n// \t}\r\n// };\r\n\r\n// export const updateProduct = (product) => async (dispatch, getState) => {\r\n// \ttry {\r\n// \t\tdispatch({\r\n// \t\t\ttype: PRODUCT_UPDATE_REQUEST,\r\n// \t\t});\r\n\r\n// \t\tconst {\r\n// \t\t\tuserLogin: { userInfo },\r\n// \t\t} = getState();\r\n\r\n// \t\tconst config = {\r\n// \t\t\theaders: {\r\n// \t\t\t\t'Content-Type': 'application/json',\r\n// \t\t\t\tAuthorization: `Bearer ${userInfo.token}`,\r\n// \t\t\t},\r\n// \t\t};\r\n\r\n// \t\tconst { data } = await axios.put(\r\n// \t\t\t`/api/products/${product._id}`,\r\n// \t\t\tproduct,\r\n// \t\t\tconfig\r\n// \t\t);\r\n\r\n// \t\tdispatch({\r\n// \t\t\ttype: PRODUCT_UPDATE_SUCCESS,\r\n// \t\t\tpayload: data,\r\n// \t\t});\r\n// \t\tdispatch({ type: PRODUCT_DETAILS_SUCCESS, payload: data });\r\n// \t} catch (error) {\r\n// \t\tconst message =\r\n// \t\t\terror.response && error.response.data.message\r\n// \t\t\t\t? error.response.data.message\r\n// \t\t\t\t: error.message;\r\n// \t\tif (message === 'Not authorized. Token Failed!') {\r\n// \t\t\tdispatch(logout());\r\n// \t\t}\r\n// \t\tdispatch({\r\n// \t\t\ttype: PRODUCT_UPDATE_FAIL,\r\n// \t\t\tpayload: message,\r\n// \t\t});\r\n// \t}\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}